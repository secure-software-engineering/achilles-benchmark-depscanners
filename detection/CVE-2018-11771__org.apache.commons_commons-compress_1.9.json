{
    "timestamp": "2018-11-30",
    "comment": "https://nvd.nist.gov/vuln/detail/CVE-2018-11771",
    "vulnerable": true,
    "gav": {
        "version": "1.9",
        "groupId": "org.apache.commons",
        "artifactId": "commons-compress"
    },
    "cve": "CVE-2018-11771",
    "details": [
        {
            "diff": "{\"lhs\" : {\"interfaces\":[\"InputStreamStatistics\"],\"encoding\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.lang.String encoding>\",\"uncompressedCount\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long uncompressedCount>\",\"lfhBuf\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\",\"skipBuf\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] skipBuf>\",\"shortBuf\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] shortBuf>\",\"wordBuf\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] wordBuf>\",\"twoDwordBuf\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] twoDwordBuf>\",\"APK_SIGNING_BLOCK_MAGIC\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] APK_SIGNING_BLOCK_MAGIC>\",\"LONG_MAX\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.math.BigInteger LONG_MAX>\",\"LFH_BUF\":null,\"SKIP_BUF\":null,\"SHORT_BUF\":null,\"WORD_BUF\":null,\"TWO_DWORD_BUF\":null,\"<init>.16\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long uncompressedCount> = 0L\"],\"<init>.18\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf> = $r5\"],\"<init>.20\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] skipBuf> = $r6\"],\"<init>.22\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] shortBuf> = $r7\"],\"<init>.24\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] wordBuf> = $r8\"],\"<init>.26\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] twoDwordBuf> = $r9\"],\"<init>.28\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.lang.String encoding> = r2\"],\"getNextZipEntry.1\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long uncompressedCount> = 0L\", \"z12 = 1\"],\"getNextZipEntry.6\":[\"if $z2 == 0 goto $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\"],\"getNextZipEntry.8\":[\"$r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"if $r7 == null goto l0 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long getBytesRead()>()\"],\"getNextZipEntry.11\":[\"z12 = 0\", \"l0 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long getBytesRead()>()\", \"if z12 == 0 goto $r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"$r85 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFirstLocalFileHeader(byte[])>($r85)\"],\"getNextZipEntry.17\":[\"$r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[])>($r8)\", \"goto [?= $r9 = new org.apache.commons.compress.archivers.zip.ZipLong]\", \"$r86 := @caughtexception\"],\"getNextZipEntry.22\":[\"$r9 = new org.apache.commons.compress.archivers.zip.ZipLong\", \"$r10 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"specialinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[])>($r10)\", \"$r11 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong LFH_SIG>\", \"$z3 = virtualinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r11)\", \"if $z3 != 0 goto $r12 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry\", \"$r78 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong CFH_SIG>\", \"$z9 = virtualinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r78)\", \"if $z9 != 0 goto r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean hitCentralDirectory> = 1\", \"$r79 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong AED_SIG>\", \"$z10 = virtualinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r79)\", \"if $z10 != 0 goto r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean hitCentralDirectory> = 1\", \"$r80 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"$z11 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean isApkSigningBlock(byte[])>($r80)\", \"if $z11 == 0 goto $r81 = new java.util.zip.ZipException\"],\"getNextZipEntry.39\":null,\"getNextZipEntry.40\":[\"$r81 = new java.util.zip.ZipException\", \"$r82 = newarray (java.lang.Object)[1]\", \"$l15 = virtualinvoke $r9.<org.apache.commons.compress.archivers.zip.ZipLong: long getValue()>()\", \"$r83 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l15)\", \"$r82[0] = $r83\", \"$r84 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(\"Unexpected record signature: 0X%X\", $r82)\", \"specialinvoke $r81.<java.util.zip.ZipException: void <init>(java.lang.String)>($r84)\", \"throw $r81\", \"$r12 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry\", \"specialinvoke $r12.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1)>(null)\", \"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current> = $r12\", \"$r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"i1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>($r13, 4)\", \"i17 = 4 + 2\", \"$r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r15 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r14)\", \"$i5 = i1 >> 8\", \"$i6 = $i5 & 15\", \"virtualinvoke $r15.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setPlatform(int)>($i6)\", \"$r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"r1 = staticinvoke <org.apache.commons.compress.archivers.zip.GeneralPurposeBit: org.apache.commons.compress.archivers.zip.GeneralPurposeBit parse(byte[],int)>($r16, i17)\"],\"getNextZipEntry.62\":[\"if z0 == 0 goto $r89 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding>\", \"$r89 = <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding UTF8_ZIP_ENCODING>\", \"goto [?= r2 = $r89]\", \"$r89 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding>\", \"r2 = $r89\", \"$r17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\"],\"getNextZipEntry.69\":[\"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$202(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,boolean)>($r17, $z4)\"],\"getNextZipEntry.72\":[\"virtualinvoke $r19.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setGeneralPurposeBit(org.apache.commons.compress.archivers.zip.GeneralPurposeBit)>(r1)\", \"i18 = i17 + 2\", \"$r20 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r21 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r20)\", \"$r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"$i7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>($r22, i18)\", \"virtualinvoke $r21.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setMethod(int)>($i7)\", \"i19 = i18 + 2\", \"$r23 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"$l8 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: long getValue(byte[],int)>($r23, i19)\", \"l2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: long dosToJavaTime(long)>($l8)\", \"$r24 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r25 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r24)\", \"virtualinvoke $r25.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setTime(long)>(l2)\", \"i20 = i19 + 4\", \"r90 = null\", \"r91 = null\", \"$r26 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$z6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$200(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r26)\", \"if $z6 != 0 goto i23 = i20 + 12\", \"$r71 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r72 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r71)\", \"$r73 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"$l14 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: long getValue(byte[],int)>($r73, i20)\", \"virtualinvoke $r72.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCrc(long)>($l14)\"],\"getNextZipEntry.98\":[\"$r74 = new org.apache.commons.compress.archivers.zip.ZipLong\", \"$r75 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"specialinvoke $r74.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[],int)>($r75, i21)\", \"r91 = $r74\"],\"getNextZipEntry.103\":[\"$r76 = new org.apache.commons.compress.archivers.zip.ZipLong\", \"$r77 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"specialinvoke $r76.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[],int)>($r77, i22)\", \"r90 = $r76\"],\"getNextZipEntry.108\":[\"goto [?= $r27 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>]\", \"i23 = i20 + 12\", \"$r27 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"i3 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>($r27, i23)\", \"i24 = i23 + 2\", \"$r28 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] lfhBuf>\", \"i4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>($r28, i24)\", \"r3 = newarray (byte)[i3]\"],\"getNextZipEntry.117\":[\"$r29 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r30 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r29)\", \"$r31 = interfaceinvoke r2.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.lang.String decode(byte[])>(r3)\", \"virtualinvoke $r30.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setName(java.lang.String,byte[])>($r31, r3)\", \"if z0 == 0 goto r4 = newarray (byte)[i4]\", \"$r68 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r69 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r68)\", \"$r70 = <org.apache.commons.compress.archivers.zip.ZipArchiveEntry$NameSource: org.apache.commons.compress.archivers.zip.ZipArchiveEntry$NameSource NAME_WITH_EFS_FLAG>\", \"virtualinvoke $r69.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setNameSource(org.apache.commons.compress.archivers.zip.ZipArchiveEntry$NameSource)>($r70)\", \"r4 = newarray (byte)[i4]\"],\"getNextZipEntry.128\":null,\"getNextZipEntry.130\":[\"virtualinvoke $r33.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setExtra(byte[])>(r4)\", \"if z0 != 0 goto specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void processZip64Extra(org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong)>(r90, r91)\", \"$z8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean useUnicodeExtraFields>\", \"if $z8 == 0 goto specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void processZip64Extra(org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong)>(r90, r91)\", \"$r66 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r67 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r66)\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: void setNameAndCommentFromExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,byte[],byte[])>($r67, r3, null)\", \"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void processZip64Extra(org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong)>(r90, r91)\", \"$r92 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r93 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r92)\", \"virtualinvoke $r93.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setLocalHeaderOffset(long)>(l0)\", \"$r94 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r95 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r94)\", \"$l26 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long getBytesRead()>()\", \"virtualinvoke $r95.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setDataOffset(long)>($l26)\", \"$r96 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r97 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r96)\", \"virtualinvoke $r97.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setStreamContiguous(boolean)>(1)\", \"$r98 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r99 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r98)\", \"$i27 = virtualinvoke $r99.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"r5 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod getMethodByCode(int)>($i27)\", \"$r100 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r101 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r100)\", \"$l28 = virtualinvoke $r101.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>()\", \"$b29 = $l28 cmp -1L\", \"if $b29 == 0 goto $r34 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod ENHANCED_DEFLATED>\"],\"getNextZipEntry.158\":[\"$r40 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r39)\", \"$z7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: boolean canHandleEntryData(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r40)\", \"if $z7 == 0 goto $i30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>\", \"$r41 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod STORED>\", \"if r5 == $r41 goto $i30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>\", \"$r42 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod DEFLATED>\", \"if r5 == $r42 goto $i30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>\", \"$r43 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream\", \"$r45 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>\", \"$r44 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r46 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r44)\", \"$l9 = virtualinvoke $r46.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>()\", \"specialinvoke $r43.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream: void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,java.io.InputStream,long)>(r0, $r45, $l9)\", \"$r47 = <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1: int[] $SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod>\", \"$i10 = virtualinvoke r5.<org.apache.commons.compress.archivers.zip.ZipMethod: int ordinal()>()\", \"$i11 = $r47[$i10]\", \"tableswitch($i11) {     case 1: goto $r64 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;     case 2: goto $r56 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;     case 3: goto $r52 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;     case 4: goto $r49 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>;     default: goto goto [?= $i30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>]; }\", \"$r64 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r63 = new org.apache.commons.compress.archivers.zip.UnshrinkingInputStream\", \"specialinvoke $r63.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: void <init>(java.io.InputStream)>($r43)\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream access$302(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,java.io.InputStream)>($r64, $r63)\", \"goto [?= (branch)]\", \"$r56 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r54 = new org.apache.commons.compress.archivers.zip.ExplodingInputStream\", \"$r55 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r57 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r55)\", \"$r58 = virtualinvoke $r57.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: org.apache.commons.compress.archivers.zip.GeneralPurposeBit getGeneralPurposeBit()>()\", \"$i12 = virtualinvoke $r58.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int getSlidingDictionarySize()>()\", \"$r59 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r60 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r59)\", \"$r61 = virtualinvoke $r60.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: org.apache.commons.compress.archivers.zip.GeneralPurposeBit getGeneralPurposeBit()>()\", \"$i13 = virtualinvoke $r61.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int getNumberOfShannonFanoTrees()>()\", \"specialinvoke $r54.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: void <init>(int,int,java.io.InputStream)>($i12, $i13, $r43)\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream access$302(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,java.io.InputStream)>($r56, $r54)\", \"goto [?= (branch)]\", \"$r52 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r51 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream\", \"specialinvoke $r51.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream: void <init>(java.io.InputStream)>($r43)\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream access$302(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,java.io.InputStream)>($r52, $r51)\", \"goto [?= (branch)]\", \"$r49 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r48 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream\", \"specialinvoke $r48.<org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream: void <init>(java.io.InputStream)>($r43)\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream access$302(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,java.io.InputStream)>($r49, $r48)\", \"goto [?= (branch)]\", \"goto [?= $i30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>]\", \"$r34 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod ENHANCED_DEFLATED>\", \"if r5 != $r34 goto $i30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>\", \"$r37 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r35 = new org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream\", \"$r36 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>\", \"specialinvoke $r35.<org.apache.commons.compress.compressors.deflate64.Deflate64CompressorInputStream: void <init>(java.io.InputStream)>($r36)\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream access$302(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,java.io.InputStream)>($r37, $r35)\", \"$i30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>\", \"$i31 = $i30 + 1\", \"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead> = $i31\", \"$r103 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r104 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r103)\", \"return $r104\"],\"readFirstLocalFileHeader.3\":[\"$r4 = new org.apache.commons.compress.archivers.zip.ZipLong\", \"specialinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[])>(r1)\"],\"readFirstLocalFileHeader.6\":[\"$z0 = virtualinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r5)\"],\"readFirstLocalFileHeader.8\":[\"$r7 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException\"],\"readFirstLocalFileHeader.10\":[\"specialinvoke $r7.<org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException: void <init>(org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature)>($r8)\", \"throw $r7\"],\"readFirstLocalFileHeader.13\":[\"$z1 = virtualinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r6)\"],\"canReadEntryData.6\":[\"if $z1 == 0 goto $z4 = 0\"],\"canReadEntryData.8\":[\"if $z2 == 0 goto $z4 = 0\", \"$z3 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean supportsCompressedSizeFor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>(r2)\", \"if $z3 == 0 goto $z4 = 0\", \"$z4 = 1\", \"goto [?= return $z4]\", \"$z4 = 0\", \"return $z4\"],\"read.6\":[\"$r41 = new java.io.IOException\", \"specialinvoke $r41.<java.io.IOException: void <init>(java.lang.String)>(\"The stream is closed\")\", \"throw $r41\"],\"read.13\":[\"if i0 > $i2 goto $r42 = new java.lang.ArrayIndexOutOfBoundsException\", \"if i1 < 0 goto $r42 = new java.lang.ArrayIndexOutOfBoundsException\", \"if i0 < 0 goto $r42 = new java.lang.ArrayIndexOutOfBoundsException\"],\"read.19\":[\"$r42 = new java.lang.ArrayIndexOutOfBoundsException\", \"specialinvoke $r42.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>()\", \"throw $r42\"],\"read.29\":[\"$r37 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException\", \"$r39 = <org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature DATA_DESCRIPTOR>\", \"$r38 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r40 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r38)\", \"specialinvoke $r37.<org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException: void <init>(org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature,org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r39, $r40)\", \"throw $r37\"],\"read.37\":[\"$z2 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean supportsCompressedSizeFor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r8)\", \"if $z2 != 0 goto $r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r33 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException\", \"$r35 = <org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature UNKNOWN_COMPRESSED_SIZE>\", \"$r34 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r36 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r34)\", \"specialinvoke $r33.<org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException: void <init>(org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature,org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r35, $r36)\", \"throw $r33\"],\"read.47\":[\"$i5 = virtualinvoke $r10.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"if $i5 != 0 goto $r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"i19 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int readStored(byte[],int,int)>(r1, i0, i1)\"],\"read.53\":[\"$i6 = virtualinvoke $r12.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"if $i6 != 8 goto $r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"i19 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int readDeflated(byte[],int,int)>(r1, i0, i1)\", \"goto [?= (branch)]\", \"$r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r14 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r13)\", \"$i7 = virtualinvoke $r14.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"$r15 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod UNSHRINKING>\", \"$i8 = virtualinvoke $r15.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>()\", \"if $i7 == $i8 goto $r43 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\"],\"read.65\":[\"$i12 = virtualinvoke $r19.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\"],\"read.67\":[\"$i13 = virtualinvoke $r20.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>()\", \"if $i12 == $i13 goto $r43 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r21 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r22 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r21)\", \"$i14 = virtualinvoke $r22.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"$r23 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod ENHANCED_DEFLATED>\", \"$i15 = virtualinvoke $r23.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>()\", \"if $i14 == $i15 goto $r43 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r24 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r25 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r24)\", \"$i16 = virtualinvoke $r25.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"$r26 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod BZIP2>\", \"$i17 = virtualinvoke $r26.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>()\", \"if $i16 != $i17 goto $r27 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException\", \"$r43 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r44 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream access$300(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r43)\", \"i19 = virtualinvoke $r44.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1)\"],\"read.85\":[\"$r27 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException\", \"$r28 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r29 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r28)\", \"$i18 = virtualinvoke $r29.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"$r30 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod getMethodByCode(int)>($i18)\", \"$r31 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r32 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r31)\", \"specialinvoke $r27.<org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException: void <init>(org.apache.commons.compress.archivers.zip.ZipMethod,org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r30, $r32)\", \"throw $r27\", \"if i19 < 0 goto return i19\"],\"read.97\":[\"virtualinvoke $r17.<java.util.zip.CRC32: void update(byte[],int,int)>(r1, i0, i19)\", \"$l10 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long uncompressedCount>\", \"$l9 = (long) i19\", \"$l11 = $l10 + $l9\", \"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long uncompressedCount> = $l11\", \"return i19\"],\"getCompressedCount\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long getCompressedCount()>\",\"getUncompressedCount\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long getUncompressedCount()>\",\"readStored.7\":[\"$r20 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\", \"if $r20 != null goto $r21 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\"],\"readStored.10\":[\"$r21 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\", \"$i22 = virtualinvoke $r21.<java.io.ByteArrayInputStream: int read(byte[],int,int)>(r1, i0, i1)\", \"return $i22\"],\"readStored.26\":[\"$r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"virtualinvoke $r13.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0)\", \"$r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>\", \"$r15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"$r17 = virtualinvoke $r15.<java.nio.ByteBuffer: byte[] array()>()\", \"i23 = virtualinvoke $r16.<java.io.InputStream: int read(byte[])>($r17)\", \"if i23 != -1 goto $r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\"],\"readStored.34\":[\"$r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"virtualinvoke $r18.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i23)\", \"virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(int)>(i23)\", \"r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l18 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>(r22)\", \"$l19 = (long) i23\", \"$l20 = $l18 + $l19\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$702(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>(r22, $l20)\"],\"readStored.44\":[\"i24 = staticinvoke <java.lang.Math: int min(int,int)>($i7, i1)\"],\"readStored.48\":[\"$l9 = (long) i24\"],\"readStored.51\":[\"$r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l16 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r12)\", \"$l17 = l2 - $l16\", \"i24 = (int) $l17\"],\"readStored.56\":[\"virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i0, i24)\", \"r23 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l12 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>(r23)\", \"$l13 = (long) i24\", \"$l14 = $l12 + $l13\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$602(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>(r23, $l14)\", \"return i24\"],\"readFromInflater.4\":[\"i7 = 0\", \"$r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"$z0 = virtualinvoke $r3.<java.util.zip.Inflater: boolean needsInput()>()\", \"if $z0 == 0 goto $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"i8 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int fill()>()\", \"if i8 <= 0 goto (branch)\", \"r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>(r2)\", \"$r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"$i3 = virtualinvoke $r6.<java.nio.ByteBuffer: int limit()>()\", \"$l4 = (long) $i3\", \"$l5 = $l2 + $l4\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$702(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>(r2, $l5)\", \"goto [?= $r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>]\", \"if i8 != -1 goto return i7\"],\"readFromInflater.20\":[\"$r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"i7 = virtualinvoke $r4.<java.util.zip.Inflater: int inflate(byte[],int,int)>(r1, i0, i1)\"],\"readFromInflater.30\":[\"if i7 != 0 goto return i7\", \"$r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"$z1 = virtualinvoke $r5.<java.util.zip.Inflater: boolean needsInput()>()\", \"if $z1 != 0 goto $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"return i7\"],\"close.4\":[\"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>\", \"virtualinvoke $r2.<java.io.InputStream: void close()>()\", \"$r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"virtualinvoke $r3.<java.util.zip.Inflater: void end()>()\", \"goto [?= return]\", \"$r4 := @caughtexception\", \"$r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"virtualinvoke $r5.<java.util.zip.Inflater: void end()>()\", \"throw $r4\"],\"skip.8\":\"$r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] skipBuf>\",\"skip.9\":\"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] skipBuf>\",\"skip.13\":\"if $b7 <= 0 goto $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] skipBuf>\",\"skip.16\":\"$r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] skipBuf>\",\"closeEntry.2\":\"if $z0 == 0 goto $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.3\":\"$r12 = new java.io.IOException\",\"closeEntry.4\":\"specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>(\\\"The stream is closed\\\")\",\"closeEntry.5\":\"throw $r12\",\"closeEntry.6\":\"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.7\":\"if $r2 != null goto $z1 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean currentEntryHasOutstandingBytes()>()\",\"closeEntry.9\":\"$z1 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean currentEntryHasOutstandingBytes()>()\",\"closeEntry.10\":\"if $z1 == 0 goto virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long skip(long)>(9223372036854775807L)\",\"closeEntry.11\":\"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void drainCurrentEntryData()>()\",\"closeEntry.12\":\"goto [?= $r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>]\",\"closeEntry.13\":\"virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long skip(long)>(9223372036854775807L)\",\"closeEntry.14\":\"$r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.15\":\"$r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r3)\",\"closeEntry.16\":\"$i3 = virtualinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\",\"closeEntry.17\":\"if $i3 != 8 goto $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.18\":\"$l12 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long getBytesInflated()>()\",\"closeEntry.19\":\"goto [?= $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>]\",\"closeEntry.20\":\"$r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.21\":\"$l12 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r5)\",\"closeEntry.22\":\"$r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.23\":\"$l4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r6)\",\"closeEntry.24\":\"$l5 = $l4 - $l12\",\"closeEntry.25\":\"i1 = (int) $l5\",\"closeEntry.26\":\"if i1 <= 0 goto $z2 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean currentEntryHasOutstandingBytes()>()\",\"closeEntry.27\":\"$r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\",\"closeEntry.28\":\"$r10 = virtualinvoke $r9.<java.nio.ByteBuffer: byte[] array()>()\",\"closeEntry.29\":\"$r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\",\"closeEntry.30\":\"$i6 = virtualinvoke $r11.<java.nio.ByteBuffer: int limit()>()\",\"closeEntry.31\":\"$i7 = $i6 - i1\",\"closeEntry.32\":\"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void pushback(byte[],int,int)>($r10, $i7, i1)\",\"closeEntry.33\":\"r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.34\":\"$l8 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>(r1)\",\"closeEntry.35\":\"$l9 = (long) i1\",\"closeEntry.36\":\"$l10 = $l8 - $l9\",\"closeEntry.37\":\"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$702(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>(r1, $l10)\",\"closeEntry.38\":\"$z2 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean currentEntryHasOutstandingBytes()>()\",\"closeEntry.39\":\"if $z2 == 0 goto $r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\",\"closeEntry.40\":\"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void drainCurrentEntryData()>()\",\"closeEntry.41\":\"$r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\",\"closeEntry.42\":\"if $r13 != null goto $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\",\"closeEntry.43\":\"$r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.44\":\"$z3 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$200(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r8)\",\"closeEntry.45\":\"if $z3 == 0 goto $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\",\"closeEntry.47\":\"$r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\",\"closeEntry.48\":\"virtualinvoke $r14.<java.util.zip.Inflater: void reset()>()\",\"closeEntry.49\":\"$r15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\",\"closeEntry.50\":\"$r16 = virtualinvoke $r15.<java.nio.ByteBuffer: java.nio.Buffer clear()>()\",\"closeEntry.51\":\"virtualinvoke $r16.<java.nio.Buffer: java.nio.Buffer flip()>()\",\"currentEntryHasOutstandingBytes\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean currentEntryHasOutstandingBytes()>\",\"drainCurrentEntryData.28\":[\"$r14 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: java.lang.String sanitize(java.lang.String)>($r13)\", \"$r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14)\", \"$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r8.<java.io.EOFException: void <init>(java.lang.String)>($r16)\"],\"readFully.2\":[\"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[],int)>(r1, 0)\"],\"readFully\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[],int)>\",\"readDataDescriptor.1\":\"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] wordBuf>\",\"readDataDescriptor.4\":\"$r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] wordBuf>\",\"readDataDescriptor.10\":\"$r26 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] wordBuf>\",\"readDataDescriptor.13\":\"$r28 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] wordBuf>\",\"readDataDescriptor.20\":\"$r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] twoDwordBuf>\",\"readDataDescriptor.23\":\"$r10 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] twoDwordBuf>\",\"readDataDescriptor.27\":\"if $z1 != 0 goto $r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] twoDwordBuf>\",\"readDataDescriptor.31\":\"$r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] twoDwordBuf>\",\"readDataDescriptor.35\":\"$r15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] twoDwordBuf>\",\"readDataDescriptor.40\":\"$r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] twoDwordBuf>\",\"readDataDescriptor.46\":\"$r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] twoDwordBuf>\",\"readDataDescriptor.51\":\"$r25 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] twoDwordBuf>\",\"supportsDataDescriptorFor.7\":[\"$i3 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"if $i3 == 0 goto $z2 = 1\", \"$i0 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"if $i0 == 8 goto $z2 = 1\"],\"supportsDataDescriptorFor.12\":[\"$r3 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod ENHANCED_DEFLATED>\", \"$i2 = virtualinvoke $r3.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>()\", \"if $i1 != $i2 goto $z2 = 0\"],\"supportsCompressedSizeFor\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean supportsCompressedSizeFor(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>\",\"bufferContainsSignature.6\":null,\"bufferContainsSignature.7\":[\"i33 = 0\"],\"bufferContainsSignature.9\":[\"$i3 = i0 + i1\", \"$i4 = $i3 - 4\", \"if i33 >= $i4 goto return z0\"],\"bufferContainsSignature.14\":[\"$b6 = $r3[i33]\"],\"bufferContainsSignature.16\":[\"$b5 = $r4[0]\", \"if $b6 != $b5 goto i33 = i33 + 1\"],\"bufferContainsSignature.20\":[\"$i7 = i33 + 1\", \"$b9 = $r6[$i7]\"],\"bufferContainsSignature.23\":[\"$b8 = $r7[1]\", \"if $b9 != $b8 goto i33 = i33 + 1\"],\"bufferContainsSignature.27\":[\"$i10 = i33 + 2\", \"$b12 = $r9[$i10]\"],\"bufferContainsSignature.30\":[\"$b11 = $r10[2]\", \"if $b12 != $b11 goto $r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\"],\"bufferContainsSignature.34\":[\"$i29 = i33 + 3\", \"$b31 = $r28[$i29]\"],\"bufferContainsSignature.37\":[\"$b30 = $r29[3]\", \"if $b31 == $b30 goto $i27 = i0 + i1\"],\"bufferContainsSignature.41\":[\"$b14 = $r12[i33]\"],\"bufferContainsSignature.43\":[\"$b13 = $r13[2]\", \"if $b14 != $b13 goto $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\"],\"bufferContainsSignature.47\":[\"$i24 = i33 + 3\", \"$b26 = $r25[$i24]\"],\"bufferContainsSignature.50\":[\"$b25 = $r26[3]\", \"if $b26 != $b25 goto $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"$i27 = i0 + i1\", \"$i28 = $i27 - i33\", \"i32 = $i28 - i2\"],\"bufferContainsSignature.59\":[\"$i15 = i33 + 2\", \"$b17 = $r15[$i15]\"],\"bufferContainsSignature.62\":[\"$b16 = $r16[2]\", \"if $b17 != $b16 goto (branch)\"],\"bufferContainsSignature.66\":[\"$i20 = i33 + 3\", \"$b22 = $r22[$i20]\"],\"bufferContainsSignature.69\":[\"$b21 = $r23[3]\", \"if $b22 != $b21 goto (branch)\", \"$i23 = i0 + i1\", \"i32 = $i23 - i33\"],\"bufferContainsSignature.74\":[\"if z0 == 0 goto i33 = i33 + 1\"],\"bufferContainsSignature.77\":[\"$i18 = i0 + i1\", \"$i19 = $i18 - i32\", \"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void pushback(byte[],int,int)>($r18, $i19, i32)\"],\"bufferContainsSignature.82\":[\"virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r20, 0, i33)\"],\"bufferContainsSignature.84\":[\"i33 = i33 + 1\"],\"skipRemainderOfArchive.2\":\"$l1 = (long) $i0\",\"skipRemainderOfArchive.3\":\"$l2 = $l1 * 46L\",\"skipRemainderOfArchive.4\":\"$l3 = $l2 - 30L\",\"skipRemainderOfArchive.8\":\"$r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] shortBuf>\",\"skipRemainderOfArchive.10\":\"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] shortBuf>\",\"realSkip.9\":\"$r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] skipBuf>\",\"realSkip.10\":\"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] skipBuf>\",\"realSkip.14\":\"if $b7 <= 0 goto $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] skipBuf>\",\"realSkip.17\":\"$r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] skipBuf>\",\"isApkSigningBlock\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean isApkSigningBlock(byte[])>\",\"<clinit>.9\":[\"$r6 = newarray (byte)[16]\", \"$r6[0] = 65\", \"$r6[1] = 80\", \"$r6[2] = 75\", \"$r6[3] = 32\", \"$r6[4] = 83\", \"$r6[5] = 105\", \"$r6[6] = 103\", \"$r6[7] = 32\", \"$r6[8] = 66\", \"$r6[9] = 108\", \"$r6[10] = 111\", \"$r6[11] = 99\", \"$r6[12] = 107\", \"$r6[13] = 32\", \"$r6[14] = 52\", \"$r6[15] = 50\", \"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] APK_SIGNING_BLOCK_MAGIC> = $r6\", \"$r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(9223372036854775807L)\", \"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.math.BigInteger LONG_MAX> = $r7\"]},\"rhs\" : {\"interfaces\":[],\"encoding\":null,\"uncompressedCount\":null,\"lfhBuf\":null,\"skipBuf\":null,\"shortBuf\":null,\"wordBuf\":null,\"twoDwordBuf\":null,\"APK_SIGNING_BLOCK_MAGIC\":null,\"LONG_MAX\":null,\"LFH_BUF\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\",\"SKIP_BUF\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>\",\"SHORT_BUF\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SHORT_BUF>\",\"WORD_BUF\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] WORD_BUF>\",\"TWO_DWORD_BUF\":\"<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>\",\"<init>.16\":null,\"<init>.18\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF> = $r5\"],\"<init>.20\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF> = $r6\"],\"<init>.22\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SHORT_BUF> = $r7\"],\"<init>.24\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] WORD_BUF> = $r8\"],\"<init>.26\":[\"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF> = $r9\"],\"<init>.28\":null,\"getNextZipEntry.1\":[\"z9 = 1\"],\"getNextZipEntry.6\":[\"if $z2 == 0 goto $r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\"],\"getNextZipEntry.8\":[\"$r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"if $r5 == null goto (branch)\"],\"getNextZipEntry.11\":[\"z9 = 0\", \"if z9 == 0 goto $r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"$r68 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFirstLocalFileHeader(byte[])>($r68)\"],\"getNextZipEntry.17\":[\"$r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void readFully(byte[])>($r6)\", \"goto [?= r81 = new org.apache.commons.compress.archivers.zip.ZipLong]\", \"$r69 := @caughtexception\"],\"getNextZipEntry.22\":[\"r81 = new org.apache.commons.compress.archivers.zip.ZipLong\", \"$r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"specialinvoke r81.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[])>($r8)\", \"$r9 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong CFH_SIG>\", \"$z3 = virtualinvoke r81.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r9)\", \"if $z3 != 0 goto r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean hitCentralDirectory> = 1\", \"$r67 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong AED_SIG>\", \"$z8 = virtualinvoke r81.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r67)\", \"if $z8 == 0 goto $r72 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong LFH_SIG>\"],\"getNextZipEntry.39\":[\"$r72 = <org.apache.commons.compress.archivers.zip.ZipLong: org.apache.commons.compress.archivers.zip.ZipLong LFH_SIG>\", \"$z10 = virtualinvoke r81.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r72)\", \"if $z10 != 0 goto r82 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry\"],\"getNextZipEntry.40\":[\"r82 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry\", \"specialinvoke r82.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$1)>(null)\", \"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current> = r82\", \"$r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"i0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>($r11, 4)\", \"i18 = 4 + 2\", \"$r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r13 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r12)\", \"$i4 = i0 >> 8\", \"$i5 = $i4 & 15\", \"virtualinvoke $r13.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setPlatform(int)>($i5)\", \"$r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"r1 = staticinvoke <org.apache.commons.compress.archivers.zip.GeneralPurposeBit: org.apache.commons.compress.archivers.zip.GeneralPurposeBit parse(byte[],int)>($r14, i18)\"],\"getNextZipEntry.62\":[\"if z0 == 0 goto $r73 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding>\", \"$r73 = <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding UTF8_ZIP_ENCODING>\", \"goto [?= r2 = $r73]\", \"$r73 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding>\", \"r2 = $r73\", \"$r15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\"],\"getNextZipEntry.69\":[\"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$202(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,boolean)>($r15, $z4)\", \"$r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r17 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r16)\", \"virtualinvoke $r17.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setGeneralPurposeBit(org.apache.commons.compress.archivers.zip.GeneralPurposeBit)>(r1)\", \"i19 = i18 + 2\"],\"getNextZipEntry.72\":[\"$r20 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"$i6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>($r20, i19)\", \"virtualinvoke $r19.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setMethod(int)>($i6)\", \"i20 = i19 + 2\", \"$r21 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"$l7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: long getValue(byte[],int)>($r21, i20)\", \"l1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: long dosToJavaTime(long)>($l7)\", \"$r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r23 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r22)\", \"virtualinvoke $r23.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setTime(long)>(l1)\"],\"getNextZipEntry.98\":[\"r74 = null\", \"r75 = null\", \"$r24 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$z6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$200(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r24)\", \"if $z6 != 0 goto i24 = i21 + 12\", \"$r60 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r61 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r60)\", \"$r62 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"$l16 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipLong: long getValue(byte[],int)>($r62, i21)\", \"virtualinvoke $r61.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setCrc(long)>($l16)\"],\"getNextZipEntry.103\":[\"r83 = new org.apache.commons.compress.archivers.zip.ZipLong\", \"$r64 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"specialinvoke r83.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[],int)>($r64, i22)\", \"r75 = r83\"],\"getNextZipEntry.108\":[\"r84 = new org.apache.commons.compress.archivers.zip.ZipLong\", \"$r66 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"specialinvoke r84.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[],int)>($r66, i23)\", \"r74 = r84\", \"i24 = i23 + 4\", \"goto [?= $r25 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>]\", \"i24 = i21 + 12\", \"$r25 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"i2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>($r25, i24)\", \"i25 = i24 + 2\", \"$r26 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] LFH_BUF>\", \"i3 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipShort: int getValue(byte[],int)>($r26, i25)\", \"r3 = newarray (byte)[i2]\"],\"getNextZipEntry.117\":[\"$r27 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r28 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r27)\", \"$r29 = interfaceinvoke r2.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.lang.String decode(byte[])>(r3)\", \"virtualinvoke $r28.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setName(java.lang.String,byte[])>($r29, r3)\", \"r4 = newarray (byte)[i3]\"],\"getNextZipEntry.128\":[\"$r30 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r31 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r30)\", \"virtualinvoke $r31.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: void setExtra(byte[])>(r4)\", \"if z0 != 0 goto specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void processZip64Extra(org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong)>(r74, r75)\", \"$z7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: boolean useUnicodeExtraFields>\", \"if $z7 == 0 goto specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void processZip64Extra(org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong)>(r74, r75)\", \"$r58 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r59 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r58)\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipUtil: void setNameAndCommentFromExtraFields(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,byte[],byte[])>($r59, r3, null)\", \"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void processZip64Extra(org.apache.commons.compress.archivers.zip.ZipLong,org.apache.commons.compress.archivers.zip.ZipLong)>(r74, r75)\", \"$r76 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r77 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r76)\", \"$l27 = virtualinvoke $r77.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>()\", \"$b28 = $l27 cmp -1L\", \"if $b28 == 0 goto $i29 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>\"],\"getNextZipEntry.130\":[\"$i8 = virtualinvoke $r33.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"$r34 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod UNSHRINKING>\", \"$i9 = virtualinvoke $r34.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>()\", \"if $i8 != $i9 goto $r35 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r54 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"r86 = new org.apache.commons.compress.archivers.zip.UnshrinkingInputStream\", \"r85 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream\", \"$r55 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>\", \"$r53 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r56 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r53)\", \"$l15 = virtualinvoke $r56.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>()\", \"specialinvoke r85.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream: void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,java.io.InputStream,long)>(r0, $r55, $l15)\", \"r89 = (java.io.InputStream) r85\", \"specialinvoke r86.<org.apache.commons.compress.archivers.zip.UnshrinkingInputStream: void <init>(java.io.InputStream)>(r89)\", \"r90 = (java.io.InputStream) r86\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream access$302(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,java.io.InputStream)>($r54, r90)\", \"goto [?= $i29 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>]\", \"$r35 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r36 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r35)\", \"$i10 = virtualinvoke $r36.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"$r37 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod IMPLODING>\", \"$i11 = virtualinvoke $r37.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>()\", \"if $i10 != $i11 goto $i29 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>\", \"$r40 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"r88 = new org.apache.commons.compress.archivers.zip.ExplodingInputStream\"],\"getNextZipEntry.158\":[\"$r41 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r39)\", \"$r42 = virtualinvoke $r41.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: org.apache.commons.compress.archivers.zip.GeneralPurposeBit getGeneralPurposeBit()>()\", \"$i12 = virtualinvoke $r42.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int getSlidingDictionarySize()>()\", \"$r43 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r44 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r43)\", \"$r45 = virtualinvoke $r44.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: org.apache.commons.compress.archivers.zip.GeneralPurposeBit getGeneralPurposeBit()>()\", \"$i13 = virtualinvoke $r45.<org.apache.commons.compress.archivers.zip.GeneralPurposeBit: int getNumberOfShannonFanoTrees()>()\", \"r87 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream\", \"$r48 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>\", \"$r47 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r49 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r47)\", \"$l14 = virtualinvoke $r49.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>()\", \"specialinvoke r87.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream: void <init>(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream,java.io.InputStream,long)>(r0, $r48, $l14)\", \"r91 = (java.io.InputStream) r87\", \"specialinvoke r88.<org.apache.commons.compress.archivers.zip.ExplodingInputStream: void <init>(int,int,java.io.InputStream)>($i12, $i13, r91)\", \"r92 = (java.io.InputStream) r88\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream access$302(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,java.io.InputStream)>($r40, r92)\", \"$i29 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead>\", \"$i30 = $i29 + 1\", \"r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int entriesRead> = $i30\", \"$r79 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r80 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r79)\", \"return $r80\"],\"readFirstLocalFileHeader.3\":[\"r9 = new org.apache.commons.compress.archivers.zip.ZipLong\", \"specialinvoke r9.<org.apache.commons.compress.archivers.zip.ZipLong: void <init>(byte[])>(r1)\"],\"readFirstLocalFileHeader.6\":[\"$z0 = virtualinvoke r9.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r5)\"],\"readFirstLocalFileHeader.8\":[\"r10 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException\"],\"readFirstLocalFileHeader.10\":[\"specialinvoke r10.<org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException: void <init>(org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature)>($r8)\", \"r11 = (java.lang.Throwable) r10\", \"throw r11\"],\"readFirstLocalFileHeader.13\":[\"$z1 = virtualinvoke r9.<org.apache.commons.compress.archivers.zip.ZipLong: boolean equals(java.lang.Object)>($r6)\"],\"canReadEntryData.6\":[\"if $z1 == 0 goto $z3 = 0\"],\"canReadEntryData.8\":[\"if $z2 == 0 goto $z3 = 0\", \"$z3 = 1\", \"goto [?= return $z3]\", \"$z3 = 0\", \"return $z3\"],\"read.6\":[\"r33 = new java.io.IOException\", \"specialinvoke r33.<java.io.IOException: void <init>(java.lang.String)>(\"The stream is closed\")\", \"throw r33\"],\"read.13\":[\"if i0 > $i2 goto r34 = new java.lang.ArrayIndexOutOfBoundsException\", \"if i1 < 0 goto r34 = new java.lang.ArrayIndexOutOfBoundsException\", \"if i0 < 0 goto r34 = new java.lang.ArrayIndexOutOfBoundsException\"],\"read.19\":[\"r34 = new java.lang.ArrayIndexOutOfBoundsException\", \"specialinvoke r34.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>()\", \"throw r34\"],\"read.29\":[\"r35 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException\", \"$r29 = <org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature: org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature DATA_DESCRIPTOR>\", \"$r28 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r30 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r28)\", \"specialinvoke r35.<org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException: void <init>(org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException$Feature,org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r29, $r30)\", \"r37 = (java.lang.Throwable) r35\", \"throw r37\"],\"read.37\":[\"$i5 = virtualinvoke $r8.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"if $i5 != 0 goto $r9 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"i12 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int readStored(byte[],int,int)>(r1, i0, i1)\", \"goto [?= (branch)]\"],\"read.47\":[\"$i6 = virtualinvoke $r10.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"if $i6 != 8 goto $r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"i12 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int readDeflated(byte[],int,int)>(r1, i0, i1)\"],\"read.53\":[\"$i7 = virtualinvoke $r12.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"$r13 = <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod UNSHRINKING>\", \"$i8 = virtualinvoke $r13.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>()\", \"if $i7 == $i8 goto $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\"],\"read.65\":[\"$i9 = virtualinvoke $r19.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\"],\"read.67\":[\"$i10 = virtualinvoke $r20.<org.apache.commons.compress.archivers.zip.ZipMethod: int getCode()>()\", \"if $i9 != $i10 goto r36 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException\", \"$r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r15 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: java.io.InputStream access$300(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r14)\", \"i12 = virtualinvoke $r15.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1)\"],\"read.85\":[\"r36 = new org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException\", \"$r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r23 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r22)\", \"$i11 = virtualinvoke $r23.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"$r24 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipMethod: org.apache.commons.compress.archivers.zip.ZipMethod getMethodByCode(int)>($i11)\", \"$r25 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r26 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r25)\", \"specialinvoke r36.<org.apache.commons.compress.archivers.zip.UnsupportedZipFeatureException: void <init>(org.apache.commons.compress.archivers.zip.ZipMethod,org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r24, $r26)\", \"r38 = (java.lang.Throwable) r36\", \"throw r38\", \"if i12 < 0 goto return i12\"],\"read.97\":[\"virtualinvoke $r17.<java.util.zip.CRC32: void update(byte[],int,int)>(r1, i0, i12)\", \"return i12\"],\"getCompressedCount\":null,\"getUncompressedCount\":null,\"readStored.7\":[\"$r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\", \"if $r22 != null goto $r23 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\"],\"readStored.10\":[\"$r23 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\", \"$i18 = virtualinvoke $r23.<java.io.ByteArrayInputStream: int read(byte[],int,int)>(r1, i0, i1)\", \"return $i18\"],\"readStored.26\":[\"$r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0)\", \"$r17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>\", \"$r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"$r18 = virtualinvoke $r16.<java.nio.ByteBuffer: byte[] array()>()\", \"i19 = virtualinvoke $r17.<java.io.InputStream: int read(byte[])>($r18)\", \"if i19 != -1 goto $r19 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\"],\"readStored.34\":[\"$r19 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"virtualinvoke $r19.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i19)\", \"virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(int)>(i19)\", \"$r21 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l16 = (long) i19\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$714(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>($r21, $l16)\"],\"readStored.44\":[\"i20 = staticinvoke <java.lang.Math: int min(int,int)>($i7, i1)\"],\"readStored.48\":[\"$l9 = (long) i20\"],\"readStored.51\":[\"$r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l14 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r13)\", \"$l15 = l2 - $l14\", \"i20 = (int) $l15\"],\"readStored.56\":[\"virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i0, i20)\", \"$r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l12 = (long) i20\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$614(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>($r12, $l12)\", \"return i20\"],\"readFromInflater.4\":[\"i5 = 0\", \"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"$z0 = virtualinvoke $r2.<java.util.zip.Inflater: boolean needsInput()>()\", \"if $z0 == 0 goto $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"i6 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: int fill()>()\", \"if i6 <= 0 goto (branch)\", \"$r6 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"$i2 = virtualinvoke $r5.<java.nio.ByteBuffer: int limit()>()\", \"$l3 = (long) $i2\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$714(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>($r6, $l3)\", \"goto [?= $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>]\", \"if i6 != -1 goto return i5\"],\"readFromInflater.20\":[\"$r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"i5 = virtualinvoke $r3.<java.util.zip.Inflater: int inflate(byte[],int,int)>(r1, i0, i1)\"],\"readFromInflater.30\":[\"if i5 != 0 goto return i5\", \"$r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"$z1 = virtualinvoke $r4.<java.util.zip.Inflater: boolean needsInput()>()\", \"if $z1 != 0 goto $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"return i5\"],\"close.4\":[\"$r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>\", \"virtualinvoke $r1.<java.io.InputStream: void close()>()\", \"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\", \"virtualinvoke $r2.<java.util.zip.Inflater: void end()>()\"],\"skip.8\":\"$r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>\",\"skip.9\":\"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>\",\"skip.13\":\"if $b7 <= 0 goto $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>\",\"skip.16\":\"$r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>\",\"closeEntry.2\":\"if $z0 == 0 goto $r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.3\":\"$r15 = new java.io.IOException\",\"closeEntry.4\":\"specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>(\\\"The stream is closed\\\")\",\"closeEntry.5\":\"throw $r15\",\"closeEntry.6\":\"$r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.7\":\"if $r1 != null goto $r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.9\":\"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.10\":\"$l2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r2)\",\"closeEntry.11\":\"$r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.12\":\"$r4 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r3)\",\"closeEntry.13\":\"$l3 = virtualinvoke $r4.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: long getCompressedSize()>()\",\"closeEntry.14\":\"$b4 = $l2 cmp $l3\",\"closeEntry.15\":\"if $b4 > 0 goto virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long skip(long)>(9223372036854775807L)\",\"closeEntry.16\":\"$r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.17\":\"$z2 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$200(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r14)\",\"closeEntry.18\":\"if $z2 != 0 goto virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long skip(long)>(9223372036854775807L)\",\"closeEntry.19\":\"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void drainCurrentEntryData()>()\",\"closeEntry.20\":\"goto [?= $r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>]\",\"closeEntry.21\":\"virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long skip(long)>(9223372036854775807L)\",\"closeEntry.22\":\"$r5 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.23\":\"$r6 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry access$100(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r5)\",\"closeEntry.24\":\"$i6 = virtualinvoke $r6.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\",\"closeEntry.25\":\"if $i6 != 8 goto $r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.26\":\"$l11 = specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: long getBytesInflated()>()\",\"closeEntry.27\":\"goto [?= $r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>]\",\"closeEntry.28\":\"$r7 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.29\":\"$l11 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r7)\",\"closeEntry.30\":\"$r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.31\":\"$l7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r8)\",\"closeEntry.32\":\"$l8 = $l7 - $l11\",\"closeEntry.33\":\"i1 = (int) $l8\",\"closeEntry.34\":\"if i1 <= 0 goto $r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\",\"closeEntry.35\":\"$r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\",\"closeEntry.36\":\"$r12 = virtualinvoke $r11.<java.nio.ByteBuffer: byte[] array()>()\",\"closeEntry.37\":\"$r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\",\"closeEntry.38\":\"$i9 = virtualinvoke $r13.<java.nio.ByteBuffer: int limit()>()\",\"closeEntry.39\":\"$i10 = $i9 - i1\",\"closeEntry.40\":\"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void pushback(byte[],int,int)>($r12, $i10, i1)\",\"closeEntry.41\":\"$r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\",\"closeEntry.42\":\"if $r16 != null goto $r17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\",\"closeEntry.43\":\"$r10 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\",\"closeEntry.44\":\"$z1 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: boolean access$200(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r10)\",\"closeEntry.45\":\"if $z1 == 0 goto $r17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\",\"closeEntry.47\":\"$r17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.util.zip.Inflater inf>\",\"closeEntry.48\":\"virtualinvoke $r17.<java.util.zip.Inflater: void reset()>()\",\"closeEntry.49\":\"$r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\",\"closeEntry.50\":\"$r19 = virtualinvoke $r18.<java.nio.ByteBuffer: java.nio.Buffer clear()>()\",\"closeEntry.51\":\"virtualinvoke $r19.<java.nio.Buffer: java.nio.Buffer flip()>()\",\"currentEntryHasOutstandingBytes\":null,\"drainCurrentEntryData.28\":[\"$r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)\", \"$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()\", \"specialinvoke $r8.<java.io.EOFException: void <init>(java.lang.String)>($r15)\"],\"readFully.2\":[\"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>\", \"i0 = staticinvoke <org.apache.commons.compress.utils.IOUtils: int readFully(java.io.InputStream,byte[])>($r2, r1)\", \"virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(int)>(i0)\", \"$i1 = lengthof r1\", \"if i0 >= $i1 goto return\", \"$r3 = new java.io.EOFException\", \"specialinvoke $r3.<java.io.EOFException: void <init>()>()\", \"throw $r3\"],\"readFully\":null,\"readDataDescriptor.1\":\"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] WORD_BUF>\",\"readDataDescriptor.4\":\"$r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] WORD_BUF>\",\"readDataDescriptor.10\":\"$r26 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] WORD_BUF>\",\"readDataDescriptor.13\":\"$r28 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] WORD_BUF>\",\"readDataDescriptor.20\":\"$r8 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>\",\"readDataDescriptor.23\":\"$r10 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>\",\"readDataDescriptor.27\":\"if $z1 != 0 goto $r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>\",\"readDataDescriptor.31\":\"$r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>\",\"readDataDescriptor.35\":\"$r15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>\",\"readDataDescriptor.40\":\"$r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>\",\"readDataDescriptor.46\":\"$r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>\",\"readDataDescriptor.51\":\"$r25 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] TWO_DWORD_BUF>\",\"supportsDataDescriptorFor.7\":null,\"supportsDataDescriptorFor.12\":[\"if $i1 == 0 goto $z2 = 1\", \"$i0 = virtualinvoke r1.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: int getMethod()>()\", \"if $i0 != 8 goto $z2 = 0\"],\"supportsCompressedSizeFor\":null,\"bufferContainsSignature.6\":[\"i31 = 0\"],\"bufferContainsSignature.7\":null,\"bufferContainsSignature.9\":[\"$i3 = i1 - 4\", \"if i32 >= $i3 goto return z0\"],\"bufferContainsSignature.14\":[\"$b5 = $r3[i32]\"],\"bufferContainsSignature.16\":[\"$b4 = $r4[0]\", \"if $b5 != $b4 goto i32 = i32 + 1\"],\"bufferContainsSignature.20\":[\"$i6 = i32 + 1\", \"$b8 = $r6[$i6]\"],\"bufferContainsSignature.23\":[\"$b7 = $r7[1]\", \"if $b8 != $b7 goto i32 = i32 + 1\"],\"bufferContainsSignature.27\":[\"$i9 = i32 + 2\", \"$b11 = $r9[$i9]\"],\"bufferContainsSignature.30\":[\"$b10 = $r10[2]\", \"if $b11 != $b10 goto $r11 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\"],\"bufferContainsSignature.34\":[\"$i28 = i32 + 3\", \"$b30 = $r28[$i28]\"],\"bufferContainsSignature.37\":[\"$b29 = $r29[3]\", \"if $b30 == $b29 goto $i26 = i0 + i1\"],\"bufferContainsSignature.41\":[\"$b13 = $r12[i32]\"],\"bufferContainsSignature.43\":[\"$b12 = $r13[2]\", \"if $b13 != $b12 goto $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\"],\"bufferContainsSignature.47\":[\"$i23 = i32 + 3\", \"$b25 = $r25[$i23]\"],\"bufferContainsSignature.50\":[\"$b24 = $r26[3]\", \"if $b25 != $b24 goto $r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"$i26 = i0 + i1\", \"$i27 = $i26 - i32\", \"i31 = $i27 - i2\"],\"bufferContainsSignature.59\":[\"$i14 = i32 + 2\", \"$b16 = $r15[$i14]\"],\"bufferContainsSignature.62\":[\"$b15 = $r16[2]\", \"if $b16 != $b15 goto (branch)\"],\"bufferContainsSignature.66\":[\"$i19 = i32 + 3\", \"$b21 = $r22[$i19]\"],\"bufferContainsSignature.69\":[\"$b20 = $r23[3]\", \"if $b21 != $b20 goto (branch)\", \"$i22 = i0 + i1\", \"i31 = $i22 - i32\"],\"bufferContainsSignature.74\":[\"if z0 == 0 goto i32 = i32 + 1\"],\"bufferContainsSignature.77\":[\"$i17 = i0 + i1\", \"$i18 = $i17 - i31\", \"specialinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void pushback(byte[],int,int)>($r18, $i18, i31)\"],\"bufferContainsSignature.82\":[\"virtualinvoke r1.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r20, 0, i32)\"],\"bufferContainsSignature.84\":[\"i32 = i32 + 1\"],\"skipRemainderOfArchive.2\":\"$i1 = $i0 * 46\",\"skipRemainderOfArchive.3\":\"$i2 = $i1 - 30\",\"skipRemainderOfArchive.4\":\"$l3 = (long) $i2\",\"skipRemainderOfArchive.8\":\"$r1 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SHORT_BUF>\",\"skipRemainderOfArchive.10\":\"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SHORT_BUF>\",\"realSkip.9\":\"$r4 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>\",\"realSkip.10\":\"$r2 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>\",\"realSkip.14\":\"if $b7 <= 0 goto $r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>\",\"realSkip.17\":\"$r3 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: byte[] SKIP_BUF>\",\"isApkSigningBlock\":null,\"<clinit>.9\":null}}",
            "contained": true,
            "affectedFile": "/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.class",
            "qname": "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream",
            "commit": "a41ce6892cb0590b2e658704434ac0dbcb6834c8",
            "ref_file": "/media/adann/9117b29d-a7c2-4f28-8956-e1540fc0a715/test_compare_script/a41ce6892cb0590b2e658704434ac0dbcb6834c8/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.class"
        },
        {
            "diff": "{\"lhs\" : {\"7\":[\"$r20 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\", \"if $r20 != null goto $r21 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\"],\"10\":[\"$r21 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\", \"$i22 = virtualinvoke $r21.<java.io.ByteArrayInputStream: int read(byte[],int,int)>(r1, i0, i1)\", \"return $i22\"],\"26\":[\"$r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"virtualinvoke $r13.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0)\", \"$r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>\", \"$r15 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"$r17 = virtualinvoke $r15.<java.nio.ByteBuffer: byte[] array()>()\", \"i23 = virtualinvoke $r16.<java.io.InputStream: int read(byte[])>($r17)\", \"if i23 != -1 goto $r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\"],\"34\":[\"$r18 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"virtualinvoke $r18.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i23)\", \"virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(int)>(i23)\", \"r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l18 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$700(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>(r22)\", \"$l19 = (long) i23\", \"$l20 = $l18 + $l19\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$702(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>(r22, $l20)\"],\"44\":[\"i24 = staticinvoke <java.lang.Math: int min(int,int)>($i7, i1)\"],\"48\":[\"$l9 = (long) i24\"],\"51\":[\"$r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l16 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r12)\", \"$l17 = l2 - $l16\", \"i24 = (int) $l17\"],\"56\":[\"virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i0, i24)\", \"r23 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l12 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>(r23)\", \"$l13 = (long) i24\", \"$l14 = $l12 + $l13\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$602(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>(r23, $l14)\", \"return i24\"]},\"rhs\" : {\"7\":[\"$r22 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\", \"if $r22 != null goto $r23 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\"],\"10\":[\"$r23 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.ByteArrayInputStream lastStoredEntry>\", \"$i18 = virtualinvoke $r23.<java.io.ByteArrayInputStream: int read(byte[],int,int)>(r1, i0, i1)\", \"return $i18\"],\"26\":[\"$r14 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0)\", \"$r17 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.io.InputStream in>\", \"$r16 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"$r18 = virtualinvoke $r16.<java.nio.ByteBuffer: byte[] array()>()\", \"i19 = virtualinvoke $r17.<java.io.InputStream: int read(byte[])>($r18)\", \"if i19 != -1 goto $r19 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\"],\"34\":[\"$r19 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: java.nio.ByteBuffer buf>\", \"virtualinvoke $r19.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(i19)\", \"virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: void count(int)>(i19)\", \"$r21 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l16 = (long) i19\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$714(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>($r21, $l16)\"],\"44\":[\"i20 = staticinvoke <java.lang.Math: int min(int,int)>($i7, i1)\"],\"48\":[\"$l9 = (long) i20\"],\"51\":[\"$r13 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l14 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$600(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry)>($r13)\", \"$l15 = l2 - $l14\", \"i20 = (int) $l15\"],\"56\":[\"virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i0, i20)\", \"$r12 = r0.<org.apache.commons.compress.archivers.zip.ZipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry current>\", \"$l12 = (long) i20\", \"staticinvoke <org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry: long access$614(org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry,long)>($r12, $l12)\", \"return i20\"]}}",
            "contained": true,
            "affectedFile": "/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.class",
            "qname": "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(byte[],int,int)",
            "commit": "a41ce6892cb0590b2e658704434ac0dbcb6834c8",
            "ref_file": "/media/adann/9117b29d-a7c2-4f28-8956-e1540fc0a715/test_compare_script/a41ce6892cb0590b2e658704434ac0dbcb6834c8/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.class"
        }
    ]
}